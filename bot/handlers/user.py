from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards.keyboards import (
    get_role_keyboard,
    get_groups_keyboard,
    get_teachers_keyboard,
    get_start_keyboard,
    get_schedule_days_keyboard,
    get_study_schedule_keyboard,
    get_settings_keyboard
)
from bot.database.db_adapter import db_adapter as db
from bot.services.parser import ScheduleParser
from bot.config import logger, WEEKDAYS, config
from bot.middlewares import ScheduleFormatter
from bot.decorators import user_exists_check
from bot.utils.april_fools import get_survival_stats, get_mercy_button, handle_mercy_request, is_april_fools_day
import os
from datetime import datetime, timedelta
from bot.utils.date_helpers import format_russian_date, get_russian_weekday
from aiogram.filters import Command

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
user_router = Router()
parser = ScheduleParser()

class ScheduleStates(StatesGroup):
    waiting_for_role = State()
    waiting_for_group = State()
    waiting_for_teacher = State()
    waiting_for_day = State()
    waiting_for_admin_message = State()

@user_router.message(F.text == "–°–∞–π—Ç –∫–æ–ª–ª–µ–¥–∂–∞")
@user_exists_check()
async def college_website(message: Message):
    await message.answer(
        "üåê –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –∫–æ–ª–ª–µ–¥–∂–∞:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
               [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", web_app={"url": "https://bartc.by/index.php/obuchayushchemusya/dnevnoe-otdelenie/tekushchee-raspisanie"})]
               #[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç?", web_app={"url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"})]
            ]
        )
    )

@user_router.message(F.text == "üìä –ì—Ä–∞—Ñ–∏–∫ —É—á–µ–±—ã")
@user_exists_check()
async def study_schedule(message: Message):
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await message.answer(
        "üéì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_study_schedule_keyboard()
    )

@user_router.message(F.text == "–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
@user_exists_check()
async def download_app(message: Message):
    from aiogram.types import FSInputFile
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    possible_paths = [
        # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º __file__
        os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "database", "BTKmobil.png"),
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.path.join("bot", "database", "BTKmobil.png"),
        # –î–ª—è —Å–ª—É—á–∞–µ–≤ –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
        "bot/database/BTKmobil.png"
    ]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—É—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        image_path = None
        for path in possible_paths:
            if os.path.exists(path):
                image_path = path
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {path}")
                break
        
        if not image_path:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ñ–∞–π–ª, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            logger.error("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤—Å–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—É—Ç—è–º")
            await message.answer(
                "üì≤ <b>–•–æ—Ç–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –µ—â—ë —É–¥–æ–±–Ω–µ–µ?</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>¬´–ë–¢–ö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª</b> –¥–ª—è Android!\n\n"
                "‚úÖ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n"
                "‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –ø—Ä–æ—à–ª—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º\n"
                "‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
                "<a href='https://play.google.com/store/apps/details?id=com.gargun.btktimetable'>"
                "üëâ <b>–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Android</b></a>\n\n"
                "üí¨ <i>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è Android.\n"
                "–ï—Å–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>!</i>",
                parse_mode="HTML"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await message.answer_photo(
            photo=FSInputFile(image_path),
            caption=(
                "üì≤ <b>–•–æ—Ç–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –µ—â—ë —É–¥–æ–±–Ω–µ–µ?</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>¬´–ë–¢–ö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª</b> –¥–ª—è Android!\n\n"
                "‚úÖ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n"
                "‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –ø—Ä–æ—à–ª—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º\n"
                "‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
                "<a href='https://play.google.com/store/apps/details?id=com.gargun.btktimetable'>"
                "üëâ <b>–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Android</b></a>\n\n"
                "üí¨ <i>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è Android.\n"
                "–ï—Å–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>!</i>"
            ),
            parse_mode="HTML"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.message(F.text == "üìÖ –ì—Ä–∞—Ñ–∏–∫ –æ–±—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞")
@user_exists_check()
async def education_schedule(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        photo_info = await db.get_active_schedule_photo()
        
        if photo_info:
            await message.answer_photo(
                photo_info["file_id"],
                caption="üìÖ –ì—Ä–∞—Ñ–∏–∫ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"
            )
            return
            
        # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
        schedule_data = await db.get_schedule_image('education_schedule')
        if schedule_data:
            await message.answer_photo(
                schedule_data['file_id'],
                caption="üìÖ –ì—Ä–∞—Ñ–∏–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"
            )
        else:
            await message.answer("‚ùå –ì—Ä–∞—Ñ–∏–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞")

@user_router.message(F.text == "üë• –°–ø–µ—Ü–≥—Ä—É–ø–ø—ã")
@user_exists_check()
async def special_groups(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–≥—Ä—É–ø–ø"""
    schedule_data = await db.get_schedule_image('special_groups')
    if not schedule_data:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–≥—Ä—É–ø–ø –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return
    
    await message.answer_photo(
        schedule_data['file_id'],
        caption="üë• –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø"
    )   

@user_router.message(F.text == "üîî –ó–≤–æ–Ω–∫–∏")
@user_exists_check()
async def bell_schedule(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤"""
    schedule_data = await db.get_schedule_image('bell_schedule')
    if not schedule_data:
        await message.answer("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        return
    
    await message.answer_photo(
        schedule_data['file_id'],
        caption="üîî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"
    )


@user_router.message(F.text == "–ù–∞–∑–∞–¥")
@user_exists_check()
async def back_to_main_menu(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await state.clear()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ë–¢–ö.\n\n‚öôÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
        reply_markup=get_start_keyboard(message.from_user.id)
    )
@user_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@user_exists_check()
async def settings_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = message.from_user.id
    user_data = await db.get_user(user_id)
    
    if not user_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        return

    role_text = user_data.get('role', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')
    teacher_text = user_data.get('selected_teacher', '–ù–µ –≤—ã–±—Ä–∞–Ω')
    group_text = user_data.get('selected_group', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')

    settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
    settings_text += f"üë§ –†–æ–ª—å: {role_text}\n"
    
    if role_text == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
        settings_text += f"üìã –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_text}\n"
    else:
        settings_text += f"üìã –ì—Ä—É–ø–ø–∞: {group_text}\n"

    settings_text += "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
    settings_text += "üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
    settings_text += "üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å - –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"
    settings_text += "üë®‚Äçüè´ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n" 
    settings_text += "üìû –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞"

    await message.answer(
        settings_text,
        reply_markup=get_settings_keyboard(user_data)
    )

@user_router.callback_query(lambda c: c.data == "toggle_notifications")
async def toggle_notifications_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    user_data = await db.get_user(user_id)
    
    if not user_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á —Å 'notifications' –Ω–∞ 'notifications_enabled'
    current_status = user_data.get('notifications_enabled', False)
    new_status = not current_status
    
    if await db.toggle_notifications(user_id, new_status):
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏
        user_data['notifications_enabled'] = new_status
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_reply_markup(reply_markup=get_settings_keyboard(user_data))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await callback.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

@user_router.callback_query(lambda c: c.data == "change_role")
async def change_role_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏"""
    await callback.message.answer("üë• –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=get_role_keyboard())
    await state.set_state(ScheduleStates.waiting_for_role)
    await callback.answer()

@user_router.callback_query(lambda c: c.data == "change_group")
async def change_group_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    groups = await db.get_cached_groups()
    if groups:
        await callback.message.answer(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
            reply_markup=get_groups_keyboard(groups)
        )
        await state.set_state(ScheduleStates.waiting_for_group)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")

@user_router.callback_query(lambda c: c.data == "change_teacher")
async def change_teacher_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    teachers = await db.get_cached_teachers()
    if teachers:
        await callback.message.answer(
            "üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
            reply_markup=get_teachers_keyboard(teachers)
        )
        await state.set_state(ScheduleStates.waiting_for_teacher)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")

@user_router.callback_query(lambda c: c.data == "message_admin")
async def message_admin_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    await callback.message.answer(
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"
    )
    await state.set_state(ScheduleStates.waiting_for_admin_message)
    await callback.answer()

@user_router.message(ScheduleStates.waiting_for_admin_message)
async def process_admin_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    if not message.text:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_message = (
            f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            f"üë§ ID: {message.from_user.id}\n"
            f"–ò–º—è: {message.from_user.full_name}\n"
            f"Username: @{message.from_user.username}\n\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        success_count = 0
        for admin_id in config.ADMIN_IDS:
            try:
                await message.bot.send_message(admin_id, admin_message)
                success_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if success_count > 0:
            await message.answer(
                "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!"
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º ({success_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏ –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    finally:
        await state.clear()


@user_router.message(F.text == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
@user_exists_check()
async def schedule_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    user_data = await db.get_user(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å (—Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—à–µ–ª user_exists_check),
    # –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –µ—â–µ —Ä–∞–∑
    if not user_data:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ user_exists_check, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å")
        await db.create_user(user_id)
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–æ–≤–∞
        user_data = await db.get_user(user_id)
    
    if not user_data or not user_data.get('role'):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å")
        await message.answer(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=get_role_keyboard()
        )
        await state.set_state(ScheduleStates.waiting_for_role)
    else:
        role = user_data.get('role')
        if role == '–°—Ç—É–¥–µ–Ω—Ç' and not user_data.get('selected_group'):
            groups = await db.get_groups()
            if not groups:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
                return
            await message.answer(
                "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
                reply_markup=get_groups_keyboard(groups)
            )
            await state.set_state(ScheduleStates.waiting_for_group)
        elif role == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å' and not user_data.get('selected_teacher'):
            teachers = await db.get_teachers()
            if not teachers:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
                return
            await message.answer(
                "üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
                reply_markup=get_teachers_keyboard(teachers)
            )
            await state.set_state(ScheduleStates.waiting_for_teacher)
        else:
            await message.answer(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
                reply_markup=get_schedule_days_keyboard()
            )
            await state.set_state(ScheduleStates.waiting_for_day)

@user_router.message(ScheduleStates.waiting_for_role)
async def process_role_selection(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if message.text not in ["–°—Ç—É–¥–µ–Ω—Ç", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"]:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–æ–ª—å: {message.text}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–æ–ª—å")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å: {message.text}")
    await db.update_user_role(user_id, message.text)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏
    await message.answer(f"‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{message.text}</b>")

    if message.text == "–°—Ç—É–¥–µ–Ω—Ç":
        logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        groups = await db.get_cached_groups()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not groups:
            groups = await db.get_groups()  # –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
            
        if not groups:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
            await state.clear()
            return
            
        await message.answer(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
            reply_markup=get_groups_keyboard(groups)
        )
        await state.set_state(ScheduleStates.waiting_for_group)
    else:
        logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        teachers = await db.get_cached_teachers()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not teachers:
            teachers = await db.get_teachers()  # –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
            
        if not teachers:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            await state.clear()
            return
            
        await message.answer(
            "üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
            reply_markup=get_teachers_keyboard(teachers)
        )
        await state.set_state(ScheduleStates.waiting_for_teacher)

@user_router.message(ScheduleStates.waiting_for_group)
async def process_group_selection(message: Message, state: FSMContext):
    user_id = message.from_user.id

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É: {message.text}")
    await db.update_selected_group(user_id, message.text)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    user_data = await db.get_user(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{message.text}</b>")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    role_text = user_data.get('role', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')
    group_text = user_data.get('selected_group', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')
    teacher_text = user_data.get('selected_teacher', '–ù–µ –≤—ã–±—Ä–∞–Ω')
    
    settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
    settings_text += f"üë§ –†–æ–ª—å: {role_text}\n"
    
    if role_text == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
        settings_text += f"üìã –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_text}\n"
    else:
        settings_text += f"üìã –ì—Ä—É–ø–ø–∞: {group_text}\n"
    
    settings_text += "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
    settings_text += "üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
    settings_text += "üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å - –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"
    settings_text += "üë®‚Äçüè´ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
    settings_text += "üìû –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞"
    
    await message.answer(
        f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{message.text}</b>",
        reply_markup=get_start_keyboard(user_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

@user_router.message(ScheduleStates.waiting_for_teacher)
async def process_teacher_selection(message: Message, state: FSMContext):
    user_id = message.from_user.id

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {message.text}")
    await db.update_selected_teacher(user_id, message.text)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    user_data = await db.get_user(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    await message.answer(f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{message.text}</b>")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    role_text = user_data.get('role', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')
    group_text = user_data.get('selected_group', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')
    teacher_text = user_data.get('selected_teacher', '–ù–µ –≤—ã–±—Ä–∞–Ω')
    
    settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
    settings_text += f"üë§ –†–æ–ª—å: {role_text}\n"
    
    if role_text == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
        settings_text += f"üìã –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_text}\n"
    else:
        settings_text += f"üìã –ì—Ä—É–ø–ø–∞: {group_text}\n"
    
    settings_text += "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
    settings_text += "üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
    settings_text += "üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å - –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"
    settings_text += "üë®‚Äçüè´ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
    settings_text += "üìû –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞"
    
    await message.answer(
        f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{message.text}</b>",
        reply_markup=get_start_keyboard(user_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

@user_router.message(ScheduleStates.waiting_for_day)
async def process_day_selection(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await db.get_user(user_id)
    parser = ScheduleParser()
    
    if message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        schedule_data = await parser.get_full_schedule(user_data)
        if not schedule_data:
            await message.answer("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        response = ScheduleFormatter.format_full_schedule(schedule_data, user_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–∞–ø—Ä–µ–ª—å—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 1 –∞–ø—Ä–µ–ª—è
        if is_april_fools_day():
            response += get_survival_stats("full")
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–∏—Ç—å –ø–æ—â–∞–¥—ã"
            await message.answer(response, reply_markup=get_mercy_button())
        else:
            await message.answer(response)
        
    elif message.text in ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–Ω—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏
        day_type = "weekend" if message.text == "–°—É–±–±–æ—Ç–∞" else "lecture"

        schedule_data = await parser.get_schedule_for_day(message.text.lower(), user_data)
        
        # –¢–µ–ø–µ—Ä—å schedule_data –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π (—Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ)
        if isinstance(schedule_data, dict):
            # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
            if schedule_data:
                response = ScheduleFormatter.format_schedule(schedule_data, message.text, user_data)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–∞–ø—Ä–µ–ª—å—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 1 –∞–ø—Ä–µ–ª—è
                if is_april_fools_day():
                    response += get_survival_stats(day_type)
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–∏—Ç—å –ø–æ—â–∞–¥—ã"
                    await message.answer(response, reply_markup=get_mercy_button())
                else:
                    await message.answer(response)
            else:
                # –ï—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç
                resp_text = (
                    f"‚ÑπÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {message.text.lower()}\n\n"
                    "–í –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."
                )
                if is_april_fools_day():
                    resp_text += get_survival_stats("weekend")
                    await message.answer(resp_text, reply_markup=get_mercy_button())
                else:
                    await message.answer(resp_text)

        elif isinstance(schedule_data, str):
            # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await message.answer(schedule_data)
        else:
            # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –≤–µ—Ä–Ω—É–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –º–µ–Ω—é")
        return
    
    await state.set_state(ScheduleStates.waiting_for_day)

@user_router.message(Command("today"))
async def cmd_today(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        today = datetime.now().strftime("%A").lower()
        await message.answer(f"üóì –ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today})...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

@user_router.message(Command("tomorrow"))
async def cmd_tomorrow(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        tomorrow = (datetime.now() + timedelta(days=1)).strftime("%A").lower()
        await message.answer(f"üóì –ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow})...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

@user_router.message(Command("schedule"))
async def cmd_schedule(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        await message.answer("üìö –ü–æ–ª—É—á–∞—é –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

@user_router.message(Command("schedule_photo"))
async def send_schedule_photo(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        photo_info = await db.get_active_schedule_photo()
        
        if photo_info:
            await message.answer_photo(
                photo_info["file_id"],
                caption="üìÖ –ì—Ä–∞—Ñ–∏–∫ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"
            )
        else:
            await message.answer(
                "‚ùå –ì—Ä–∞—Ñ–∏–∫ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–∏—Ç—å –ø–æ—â–∞–¥—ã"
@user_router.callback_query(lambda c: c.data == "april_fools_mercy")
async def mercy_button_callback(callback: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤–æ–µ –ª–∏ –∞–ø—Ä–µ–ª—è
    if is_april_fools_day():
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –ø–æ—â–∞–¥–µ
        response = await handle_mercy_request(callback.message)
        # –û—Ç–≤–µ—á–∞–µ–º –≤ –≤–∏–¥–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.answer(response, show_alert=True)
    else:
        # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–æ–µ –∞–ø—Ä–µ–ª—è, —Å–æ–æ–±—â–∞–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ 1 –∞–ø—Ä–µ–ª—è!", show_alert=True)