import asyncio
import signal
import sys
from aiogram import Bot, Dispatcher
from bot.config import config, logger
from bot.handlers import main_router, register_handlers
from bot.services.scheduler import start_scheduler
from bot.middleware.rate_limit import RateLimitMiddleware
from bot.middleware.spam_protection import SpamProtection
from bot.middleware.performance import PerformanceMiddleware
from bot.services.monitoring import monitor
from bot.services.parser import ScheduleParser
from bot.utils.recovery import create_recovery_manager
from bot.utils.notifications import AdminNotifier
import os

class BotApp:
    def __init__(self):
        self.bot = Bot(token=config.BOT_TOKEN)
        self.dp = Dispatcher()
        self.tasks = []
        self.is_running = True
        self.notifier = AdminNotifier(self.bot)

    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ middleware"""
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware
        self.dp.message.middleware(RateLimitMiddleware())
        self.dp.message.middleware(SpamProtection())
        self.dp.message.middleware(PerformanceMiddleware())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        register_handlers(self.dp)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–ø—É—Å–∫–µ
        await self.notifier.notify_startup()

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –±–æ—Ç–∞"""
        await self.setup()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        scheduler_task = asyncio.create_task(start_scheduler(self.bot))
        self.tasks.extend([
            asyncio.create_task(self.metrics_collector()),
            scheduler_task
        ])
        
        logger.info("Bot services started")
        self.notifier.log_to_file("–°–µ—Ä–≤–∏—Å—ã –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω—ã", "INFO")

    async def stop(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("Shutting down bot...")
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        for task in self.tasks:
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await self.notifier.send_admin_message("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É", "INFO")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await self.bot.session.close()
        logger.info("Bot shutdown complete")
        self.notifier.log_to_file("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "INFO")

    async def metrics_collector(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫"""
        while self.is_running:
            try:
                await monitor.collect_metrics()
                await asyncio.sleep(60)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in metrics collector: {e}")
                await asyncio.sleep(5)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    app = BotApp()
    notifier = app.notifier
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        async def restart_bot():
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            await app.bot.delete_webhook(drop_pending_updates=True)
            await asyncio.sleep(5)
            os.execv(sys.executable, ['python'] + sys.argv)
            
        recovery_manager = create_recovery_manager(restart_bot, notifier)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        previous_state = await recovery_manager.load_state()
        if previous_state and not previous_state.get('was_clean_shutdown'):
            warning_msg = "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—Ç–∞"
            logger.warning(warning_msg)
            await notifier.send_admin_message(warning_msg, "WARNING")

        try:
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            await app.start()
            await app.dp.start_polling(app.bot)
        except Exception as e:
            await recovery_manager.handle_error(e)
            raise

    except Exception as e:
        error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
        logger.error(error_msg)
        await notifier.notify_critical_error(e, "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        sys.exit(1)

    finally:
        await app.stop()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)