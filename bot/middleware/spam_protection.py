from aiogram import BaseMiddleware
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from cachetools import TTLCache
from datetime import datetime, timedelta
from bot.config import logger, config
from bot.database.db_adapter import db_adapter as db
import logging

class SpamProtection(BaseMiddleware):
    def __init__(self):
        self.cache = TTLCache(maxsize=10000, ttl=60.0)
        self.message_limit = 20
        self.warning_count = 5
        # –î–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —Ö—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–∞—Ö –≤ –ø–∞–º—è—Ç–∏
        # –ù–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.banned_users = {}
        # –°–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º
        self.admin_messages = set()
        
    async def ban_user(self, user_id: int, duration_minutes: int = 30, reason: str = "—Å–ø–∞–º"):
        """–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        ban_end = datetime.now() + timedelta(minutes=duration_minutes)
        self.banned_users[user_id] = (ban_end, reason)
        logger.warning(f"User {user_id} banned for {duration_minutes} minutes. Reason: {reason}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.ban_user(user_id, reason)

    async def unban_user(self, user_id: int) -> bool:
        """–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.banned_users:
            del self.banned_users[user_id]
            logger.info(f"User {user_id} has been unbanned")
            
            # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.unban_user(user_id)
            return True
        return False

    async def is_banned(self, user_id: int) -> tuple[bool, str, datetime]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞, –ø—Ä–∏—á–∏–Ω—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫—ç—à–µ
        if user_id in self.banned_users:
            ban_end, reason = self.banned_users[user_id]
            if datetime.now() >= ban_end:
                await self.unban_user(user_id)
                return False, "", None
            return True, reason, ban_end
            
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫—ç—à–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        is_banned, reason = await db.is_user_banned(user_id)
        if is_banned:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ –≤ –∫—ç—à–µ,
            # –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫—ç—à —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
            ban_end = datetime.now() + timedelta(minutes=30)
            self.banned_users[user_id] = (ban_end, reason)
            return True, reason, ban_end
            
        return False, "", None

    async def __call__(self, handler, event: Message, data):
        user_id = event.from_user.id
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
        if config.is_admin(user_id):
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
        is_banned, reason, ban_end = await self.is_banned(user_id)
        if is_banned:
            time_left = ban_end - datetime.now()
            minutes_left = int(time_left.total_seconds() / 60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –∞–¥–º–∏–Ω—É
            if event.text and event.text.startswith("/admin"):
                if user_id not in self.admin_messages:
                    self.admin_messages.add(user_id)
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    user_data = await db.get_user(user_id)
                    username = user_data.get('username', '–ù–µ—Ç username') if user_data else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
                    
                    admin_message = (
                        f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                        f"üë§ ID: `{user_id}`\n"
                        f"Username: @{username}\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞: {reason}\n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å: {minutes_left} –º–∏–Ω.\n\n"
                        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{event.text[6:].strip()}"  # –£–±–∏—Ä–∞–µ–º /admin –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–∞–∑–±–∞–Ω–∞
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(
                            text="üîì –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                            callback_data=f"unban_{user_id}"
                        )
                    ]])
                    
                    await event.bot.send_message(
                        config.ADMIN_ID,
                        admin_message,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    
                    await event.answer(
                        "‚úâÔ∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞."
                    )
                else:
                    await event.answer(
                        "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞."
                    )
                return
            
            await event.answer(
                f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {minutes_left} –º–∏–Ω—É—Ç.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                "–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin <–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        user_data = self.cache.get(user_id, {"count": 0, "warnings": 0})
        user_data["count"] += 1
        
        if user_data["count"] > self.message_limit:
            user_data["warnings"] += 1
            if user_data["warnings"] >= self.warning_count:
                # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç
                await self.ban_user(user_id, duration_minutes=30)
                await event.answer(
                    "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 30 –º–∏–Ω—É—Ç –∑–∞ —Å–ø–∞–º\n"
                    "–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin <–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>"
                )
                return
            
            logger.warning(f"Spam warning for user {user_id}")
            await event.answer(
                f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π ({user_data['warnings']}/{self.warning_count})"
            )
            return
            
        self.cache[user_id] = user_data
        return await handler(event, data)

class SecurityLogger:
    def __init__(self):
        self.logger = logging.getLogger('security')
        self.logger.setLevel(logging.INFO)
        
        # –§–∞–π–ª–æ–≤—ã–π handler –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_handler = logging.FileHandler('security.log')
        security_handler.setFormatter(
            logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        )
        self.logger.addHandler(security_handler)
        
    def log_access(self, user_id: int, action: str, status: bool):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–∞"""
        self.logger.info(
            f"Access attempt: user={user_id}, action={action}, "
            f"status={'success' if status else 'denied'}"
        )
        
    def log_suspicious(self, user_id: int, reason: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.logger.warning(
            f"Suspicious activity: user={user_id}, reason={reason}"
        )
        
    def log_security_event(self, event_type: str, details: dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.logger.info(
            f"Security event: type={event_type}, details={details}"
        )

security_logger = SecurityLogger()