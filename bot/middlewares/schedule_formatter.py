import locale
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any
from bot.config import format_date, WEEKDAYS, MONTHS, logger

logger = logging.getLogger(__name__)

try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except locale.Error:
    try:
        locale.setlocale(locale.LC_TIME, 'ru_RU')
    except locale.Error:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å")

def _translate_day(day: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –æ–±—Ä–∞—Ç–Ω–æ"""
    ru_to_en = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'monday',
        '–≤—Ç–æ—Ä–Ω–∏–∫': 'tuesday', 
        '—Å—Ä–µ–¥–∞': 'wednesday',
        '—á–µ—Ç–≤–µ—Ä–≥': 'thursday',
        '–ø—è—Ç–Ω–∏—Ü–∞': 'friday',
        '—Å—É–±–±–æ—Ç–∞': 'saturday',
        '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'sunday'
    }
    
    en_to_ru = {
        'monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫',
        'wednesday': '—Å—Ä–µ–¥–∞', 
        'thursday': '—á–µ—Ç–≤–µ—Ä–≥',
        'friday': '–ø—è—Ç–Ω–∏—Ü–∞',
        'saturday': '—Å—É–±–±–æ—Ç–∞',
        'sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }

    day = day.lower()
    if day in ru_to_en:
        return ru_to_en[day]
    elif day in en_to_ru:
        return en_to_ru[day]
    return day

def format_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç '23-–¥–µ–∫ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)'"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ñ–æ—Ä–º–∞—Ç–∞ "23-–¥–µ–∫" –∏–ª–∏ "01-–º–∞—Ä—Ç"
        if '-' in date_str:
            day, month = date_str.split('-')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ
            month_mapping = {
                '–º–∞—Ä—Ç': '–º–∞—Ä',
                '–º–∞–π': '–º–∞—è',
                '–∏—é–Ω—å': '–∏—é–Ω',
                '–∏—é–ª—å': '–∏—é–ª',
                '–∞–≤–≥—É—Å—Ç': '–∞–≤–≥',
                '—Å–µ–Ω—Ç—è–±—Ä—å': '—Å–µ–Ω',
                '–æ–∫—Ç—è–±—Ä—å': '–æ–∫—Ç',
                '–Ω–æ—è–±—Ä—å': '–Ω–æ—è–±',
                '–¥–µ–∫–∞–±—Ä—å': '–¥–µ–∫',
                '—è–Ω–≤–∞—Ä—å': '—è–Ω–≤',
                '—Ñ–µ–≤—Ä–∞–ª—å': '—Ñ–µ–≤',
                '–∞–ø—Ä–µ–ª—å': '–∞–ø—Ä'
            }
            
            # –ï—Å–ª–∏ –º–µ—Å—è—Ü –ø–æ–ª–Ω—ã–π - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π
            month = month_mapping.get(month.lower(), month.lower())
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç datetime
            current_year = datetime.now().year
            try:
                date_obj = datetime.strptime(f"{day}-{month}-{current_year}", "%d-%b-%Y")
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
                month_num = MONTHS.get(month, None)
                if month_num:
                    date_obj = datetime(current_year, month_num, int(day))
                else:
                    return date_str
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            weekday_ru = {
                'Monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                'Tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫',
                'Wednesday': '—Å—Ä–µ–¥–∞',
                'Thursday': '—á–µ—Ç–≤–µ—Ä–≥',
                'Friday': '–ø—è—Ç–Ω–∏—Ü–∞',
                'Saturday': '—Å—É–±–±–æ—Ç–∞',
                'Sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
            }
            weekday = weekday_ru[date_obj.strftime('%A')]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return f"{day}-{month} ({weekday})"
        return date_str
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã {date_str}: {e}")
        return date_str

class ScheduleFormatter:
    @staticmethod
    def _parse_date(date_str: str) -> datetime:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime"""
        try:
            if '-' in date_str:
                day, month = date_str.split('-')
                month_num = MONTHS.get(month.lower())
                if month_num:
                    return datetime(datetime.now().year, month_num, int(day))
            return datetime.now()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã {date_str}: {e}")
            return datetime.now()

    @staticmethod
    def format_schedule(schedule_data: Dict[str, List[Dict]] | str | None, day: str, user_data: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å, —É—á–∏—Ç—ã–≤–∞—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∞—Ç"""
        if schedule_data is None:
            return f"‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day.lower()} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

        if isinstance(schedule_data, str):
            return schedule_data

        if not schedule_data:
            # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ grouped_schedule –ø—É—Å—Ç, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π –ø–∞—Ä—Å–∏–Ω–≥–∞.
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å –∏ –≥—Ä—É–ø–ø—É/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            role_text = user_data.get('role', '')
            target_text = user_data.get('selected_group') if role_text == '–°—Ç—É–¥–µ–Ω—Ç' else user_data.get('selected_teacher')

            if role_text and target_text:
                return f"‚ÑπÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day.capitalize()}\n\n–£ {role_text} {target_text} –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."
            else:
                return f"‚ÑπÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day.capitalize()}\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ."

        response_parts = []

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        sorted_dates = sorted(schedule_data.items(), key=lambda item: ScheduleFormatter._parse_date_from_formatted(item[0]))
        
        header_added = False

        for formatted_date, lessons_for_date in sorted_dates:
            if not lessons_for_date:
                continue

            if not header_added:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                header = "üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ "
                if user_data.get('role') == '–°—Ç—É–¥–µ–Ω—Ç':
                    header += f"–≥—Ä—É–ø–ø—ã {user_data.get('selected_group')}\n\n"
                else:
                    header += f"–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {user_data.get('selected_teacher')}\n\n"
                response_parts.append(header)
                header_added = True
            
            response_parts.extend([
                f"üìÖ {formatted_date}",
                "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            ])

            grouped_lessons = []
            current_group = None

            for lesson in sorted(lessons_for_date, key=lambda x: int(x['lesson_number'])):
                if current_group and ScheduleFormatter._can_group_lessons(current_group[-1], lesson):
                    current_group.append(lesson)
                else:
                    if current_group:
                        grouped_lessons.append(current_group)
                    current_group = [lesson]

            if current_group:
                grouped_lessons.append(current_group)

            for group in grouped_lessons:
                if len(group) > 1:
                    numbers = f"{group[0]['lesson_number']}-{group[-1]['lesson_number']}"
                else:
                    numbers = group[0]['lesson_number']

                lesson_block = [
                    f"üïê {numbers} –ø–∞—Ä–∞",
                    f"üìö {group[0]['discipline']}"
                ]

                if user_data.get('role') == '–°—Ç—É–¥–µ–Ω—Ç':
                    lesson_block.append(f"üë®‚Äçüè´ {group[0]['teacher_name']}")
                else:
                    groups_in_lesson = set()
                    for lesson_item in group:
                        if lesson_item.get('group_name'):
                            groups_in_lesson.add(lesson_item['group_name'])
                    if groups_in_lesson:
                        lesson_block.append(f"üë• –ì—Ä—É–ø–ø–∞: {', '.join(sorted(groups_in_lesson))}")

                lesson_block.append(f"üè¢ –ö–∞–±–∏–Ω–µ—Ç: {group[0]['classroom']}")

                if group[0].get('subgroup') and group[0]['subgroup'] != '0':
                    lesson_block.append(f"üë• –ü–æ–¥–≥—Ä—É–ø–ø–∞ {group[0]['subgroup']}")

                response_parts.extend(lesson_block)
                response_parts.append("")

        return "\n".join(response_parts).strip()

    @staticmethod
    def _parse_date_from_formatted(formatted_date_str: str) -> datetime:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ '23-–¥–µ–∫ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)'"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å —Å –¥–∞—Ç–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä '23-–¥–µ–∫'
            date_part = formatted_date_str.split(' ')[0]
            day, month_abbr = date_part.split('-')

            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –ø–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é
            month_num = None
            for m_name, m_num in MONTHS.items():
                if m_name.startswith(month_abbr.lower()): # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞—á–∞–ª—É —Å—Ç—Ä–æ–∫–∏, –¥–ª—è '–Ω–æ—è–±' –∏ '–Ω–æ—è–±—Ä—å'
                    month_num = m_num
                    break
            
            if not month_num:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞: {month_abbr}")

            current_year = datetime.now().year
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≥–æ–¥—É (–µ—Å–ª–∏ –º–µ—Å—è—Ü —É–∂–µ –ø—Ä–æ—à–µ–ª –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É)
            if month_num < datetime.now().month:
                year = current_year + 1
            else:
                year = current_year

            return datetime(year, month_num, int(day))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∞—Ç—ã {formatted_date_str}: {e}")
            return datetime.min # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ—à–∏–±–æ–∫

    @staticmethod
    def _can_group_lessons(lesson1: dict, lesson2: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–∞—Ä"""
        return (
            lesson1['discipline'] == lesson2['discipline'] and
            lesson1['teacher_name'] == lesson2['teacher_name'] and
            lesson1['classroom'] == lesson2['classroom'] and
            lesson1.get('subgroup', '0') == lesson2.get('subgroup', '0') and
            int(lesson2['lesson_number']) == int(lesson1['lesson_number']) + 1
        )

    @staticmethod
    def format_full_schedule(schedule_data: dict | None, user_data: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        if schedule_data is None:
            return "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

        # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ –¥–ª—è –≤—Å–µ—Ö
        if not schedule_data:
            return "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = "üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ "
        if user_data.get('role') == '–°—Ç—É–¥–µ–Ω—Ç':
            header += f"–≥—Ä—É–ø–ø—ã {user_data.get('selected_group')}\n\n"
        else:
            header += f"–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {user_data.get('selected_teacher')}\n\n"

        response = [header]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        sorted_dates = sorted(schedule_data.items(), key=lambda x: ScheduleFormatter._parse_date(x[0]))

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        for date, lessons in sorted_dates:
            if not lessons:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–Ω–∏
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É
            response.extend([
                "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –¥–∞—Ç–æ–π
                f"üìÖ {date}",
                "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            ])

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä—ã
            grouped_lessons = []
            current_group = None
            
            for lesson in sorted(lessons, key=lambda x: int(x['lesson_number'])):
                if current_group and ScheduleFormatter._can_group_lessons(current_group[-1], lesson):
                    current_group.append(lesson)
                else:
                    if current_group:
                        grouped_lessons.append(current_group)
                    current_group = [lesson]
            
            if current_group:
                grouped_lessons.append(current_group)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –ø–∞—Ä
            for group in grouped_lessons:
                if len(group) > 1:
                    numbers = f"{group[0]['lesson_number']}-{group[-1]['lesson_number']}"
                else:
                    numbers = group[0]['lesson_number']

                lesson_block = [
                    f"üïê {numbers} –ø–∞—Ä–∞",
                    f"üìö {group[0]['discipline']}"
                ]

                if user_data.get('role') == '–°—Ç—É–¥–µ–Ω—Ç':
                    lesson_block.append(f"üë®‚Äçüè´ {group[0]['teacher_name']}")
                else:
                    # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É
                    groups = set()
                    for lesson in group:
                        if lesson.get('group_name'):
                            groups.add(lesson['group_name'])
                    if groups:
                        lesson_block.append(f"üë• –ì—Ä—É–ø–ø–∞: {', '.join(sorted(groups))}")

                lesson_block.append(f"üè¢ –ö–∞–±–∏–Ω–µ—Ç: {group[0]['classroom']}")

                if group[0].get('subgroup') and group[0]['subgroup'] != '0':
                    lesson_block.append(f"üë• –ü–æ–¥–≥—Ä—É–ø–ø–∞ {group[0]['subgroup']}")

                response.extend(lesson_block)
                response.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏

        return "\n".join(response) 