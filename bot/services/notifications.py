from datetime import datetime
from typing import List, Dict
from aiogram import Bot
from bot.config import config, logger,WEEKDAYS, MONTHS
from bot.database.db_adapter import db_adapter as db
from bot.middlewares.schedule_formatter import ScheduleFormatter
from bot.utils.academic_reset import AcademicYearReset
import asyncio
import time

class NotificationManager:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.formatter = ScheduleFormatter()
        self._running = True
        self._initialize_tables()
        self.academic_reset = AcademicYearReset(bot)

    def _initialize_tables(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∞—Ç
            query = """
            CREATE TABLE IF NOT EXISTS last_checked_dates (
                id INTEGER PRIMARY KEY,
                dates TEXT,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """
            db.db.execute_query(query)
            logger.info("–¢–∞–±–ª–∏—Ü–∞ last_checked_dates —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            import traceback
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")

    async def start_notifications(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info("üîî –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        while self._running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —É—á–µ–±–Ω—ã–π –≥–æ–¥
                await self._check_academic_year_reset()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
                logger.info("‚è±Ô∏è –†–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(5)

    async def _check_academic_year_reset(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–±—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞
            reset_performed = await self.academic_reset.check_and_reset()
            
            if reset_performed:
                logger.info("üéì –í—ã–ø–æ–ª–Ω–µ–Ω —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–±—Ä–æ—Å–∞ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞: {e}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        self._running = False

    async def check_schedule_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞)"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        result = await self.check_and_send_notifications()
        if result:
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
        
    async def check_and_send_notifications(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –¥–∞—Ç–∞—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ –±–µ–∑ –æ—à–∏–±–æ–∫ (–¥–∞–∂–µ –µ—Å–ª–∏ –Ω–æ–≤—ã—Ö –¥–∞—Ç –Ω–µ—Ç).
        """
        success = False
        try:
            logger.info("üìä –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule = await db.get_schedule()
            if not schedule:
                logger.info("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return False

            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å {len(schedule)} –¥–∞—Ç–∞–º–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            current_dates = set()
            invalid_dates = []
            
            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
            month_mapping = {
                '—è–Ω–≤': '01', '—Ñ–µ–≤': '02', '–º–∞—Ä': '03', '–∞–ø—Ä': '04',
                '–º–∞—è': '05', '–º–∞–π': '05', '–∏—é–Ω': '06', '–∏—é–ª': '07', '–∞–≤–≥': '08',
                '—Å–µ–Ω': '09', '–æ–∫—Ç': '10', '–Ω–æ—è': '11', '–¥–µ–∫': '12',
            }
            
            for date_str in schedule.keys():
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
                    if '.' in date_str:
                        datetime.strptime(date_str, "%d.%m.%Y")
                        current_dates.add(date_str)
                    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç DD-MMM
                    elif '-' in date_str:
                        day, month_abbr = date_str.split('-')
                        day = day.strip()
                        month_abbr = month_abbr.strip().lower()[:3]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –±—É–∫–≤—ã
                        
                        if month_abbr in month_mapping:
                            month_num = month_mapping[month_abbr]
                            year = datetime.now().year
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
                            formatted_date = f"{day.zfill(2)}.{month_num}.{year}"
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞
                            datetime.strptime(formatted_date, "%d.%m.%Y")
                            
                            logger.info(f"üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞: {date_str} -> {formatted_date}")
                            current_dates.add(formatted_date)
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞: {month_abbr} –≤ –¥–∞—Ç–µ {date_str}")
                            invalid_dates.append(date_str)
                    else:
                        invalid_dates.append(date_str)
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
                except ValueError as e:
                    invalid_dates.append(date_str)
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã {date_str}: {e}")
                    continue
            
            if invalid_dates:
                logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(invalid_dates)} –¥–∞—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º")
            
            logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω–æ {len(current_dates)} –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞—Ç –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
            if current_dates:
                logger.info(f"üìÖ –ü—Ä–∏–º–µ—Ä—ã –¥–∞—Ç: {sorted(list(current_dates))[:5]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã
            last_checked = await db.get_last_checked_dates()
            
            if not isinstance(last_checked, list):
                logger.error(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∞—Ç: {type(last_checked)}. –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫.")
                last_checked = []
                
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if last_checked:
                logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã: {last_checked[:5]}... (–≤—Å–µ–≥–æ: {len(last_checked)})")
            else:
                logger.info("üîç –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∞—Ç –ø—É—Å—Ç")
            
            if not last_checked:
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—ã
                logger.info("üÜï –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∞—Ç")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–±–æ—Ä –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                current_dates_list = list(current_dates)
                
                if not current_dates_list:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                    return False
                    
                logger.info(f"üìã –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(current_dates_list)} —Ç–µ–∫—É—â–∏—Ö –¥–∞—Ç")
                
                success = await db.update_last_checked_dates(current_dates_list)
                if success:
                    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(current_dates_list)} –¥–∞—Ç –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                    return True
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                    return False

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º last_checked –≤ –Ω–∞–±–æ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            last_checked_set = set(last_checked)
            logger.info(f"üîÑ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º {len(current_dates)} —Ç–µ–∫—É—â–∏—Ö –¥–∞—Ç —Å {len(last_checked_set)} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏")
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –¥–∞—Ç—ã
            new_dates = current_dates - last_checked_set
            
            if new_dates:
                logger.info(f"üîî –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞—Ç—ã: {sorted(list(new_dates))} (–≤—Å–µ–≥–æ: {len(new_dates)})")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                formatted_dates = []
                for date_str in sorted(new_dates):
                    try:
                        date = datetime.strptime(date_str, "%d.%m.%Y")
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                        weekday_num = date.weekday()  # 0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                        weekday_names = {
                            0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                            1: "–≤—Ç–æ—Ä–Ω–∏–∫",
                            2: "—Å—Ä–µ–¥–∞",
                            3: "—á–µ—Ç–≤–µ—Ä–≥",
                            4: "–ø—è—Ç–Ω–∏—Ü–∞",
                            5: "—Å—É–±–±–æ—Ç–∞",
                            6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
                        }
                        weekday = weekday_names.get(weekday_num, "")
                        
                        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—Ü –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
                        month_num = date.month
                        months = {
                            1: '—è–Ω–≤–∞—Ä—å', 2: '—Ñ–µ–≤—Ä–∞–ª—å', 3: '–º–∞—Ä—Ç', 4: '–∞–ø—Ä–µ–ª—å',
                            5: '–º–∞–π', 6: '–∏—é–Ω—å', 7: '–∏—é–ª—å', 8: '–∞–≤–≥—É—Å—Ç',
                            9: '—Å–µ–Ω—Ç—è–±—Ä—å', 10: '–æ–∫—Ç—è–±—Ä—å', 11: '–Ω–æ—è–±—Ä—å', 12: '–¥–µ–∫–∞–±—Ä—å'
                        }
                        month_name = months.get(month_num, "")
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                        formatted_date = f"{date.day} {month_name} ({weekday})"
                        formatted_dates.append(formatted_date)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã {date_str}: {e}")
                        formatted_dates.append(date_str)
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if formatted_dates:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –±–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    logger.info("üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                    users_with_notifications = await db.get_users_with_notifications()
                    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(users_with_notifications)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
                    
                    if users_with_notifications:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                        user_notification_text = (
                            "üìÖ <b>–ù–æ–≤—ã–µ –¥–∞—Ç—ã:</b>\n"
                            f"{chr(10).join('‚Ä¢ ' + date for date in formatted_dates)}\n\n"
                            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏."
                        )
                        
                        sent_count = 0
                        failed_count = 0
                        start_time = time.time()
                        
                        for user_id in users_with_notifications:
                            try:
                                await self.bot.send_message(
                                    user_id,
                                    user_notification_text,
                                    parse_mode="HTML"
                                )
                                sent_count += 1
                                if sent_count % 10 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–æ–∫
                                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}/{len(users_with_notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                            except Exception as e:
                                failed_count += 1
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                                if failed_count % 10 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 –æ—à–∏–±–æ–∫
                                    logger.error(f"‚ö†Ô∏è –ù–∞–∫–æ–ø–ª–µ–Ω–æ {failed_count} –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏")
                        
                        duration = time.time() - start_time
                        logger.info(
                            f"üìä –ò—Ç–æ–≥–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {sent_count}/{len(users_with_notifications)} —É—Å–ø–µ—à–Ω–æ, "
                            f"{failed_count} —Å –æ—à–∏–±–∫–∞–º–∏, –≤—Ä–µ–º—è: {duration:.2f} —Å–µ–∫"
                        )
                    else:
                        logger.info("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
                else:
                    logger.warning("‚ö†Ô∏è –ù–æ–≤—ã–µ –¥–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö")
            else:
                logger.info("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –¥–∞—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
                success = True  # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –¥–∞—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∞—Ç (–≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–æ–≤—ã—Ö –¥–∞—Ç –Ω–µ—Ç)
            update_success = await db.update_last_checked_dates(list(current_dates))
            if update_success:
                logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω ({len(current_dates)} –¥–∞—Ç)")
                success = True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∞—Ç")
                success = False

            return success

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            import traceback
            logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return False
            
        finally:
            logger.info("üìã –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    async def check_and_send_notifications_old(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –¥–∞—Ç–∞—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        try:
            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É (0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            weekday_names = {
                0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                1: "–≤—Ç–æ—Ä–Ω–∏–∫",
                2: "—Å—Ä–µ–¥–∞",
                3: "—á–µ—Ç–≤–µ—Ä–≥",
                4: "–ø—è—Ç–Ω–∏—Ü–∞",
                5: "—Å—É–±–±–æ—Ç–∞",
                6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule = await db.get_schedule()
            if not schedule:
                logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            current_dates = set()
            for date, lessons in schedule.items():
                if lessons:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –Ω–µ –ø—É—Å—Ç
                    current_dates.add(date)
            
            logger.info(f"–¢–µ–∫—É—â–∏–µ –¥–∞—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {current_dates}")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã
            last_checked_dates = await db.get_last_checked_dates()
            last_checked_dates_set = set(last_checked_dates)
            
            logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã: {last_checked_dates_set}")

            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –¥–∞—Ç—ã
            new_dates = current_dates - last_checked_dates_set
            
            if new_dates:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {new_dates}")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –¥–∞—Ç —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
                formatted_dates = []
                for date in new_dates:
                    try:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç datetime
                        if '-' in date:
                            day, month = date.split('-')
                            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–µ—Å—è—Ü –≤ —Å–ª–æ–≤–∞—Ä–µ (–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ)
                            month_lower = month.lower()
                            month_num = MONTHS.get(month_lower)
                            
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3 –±—É–∫–≤—ã
                            if not month_num and len(month_lower) > 3:
                                month_short = month_lower[:3]
                                month_num = MONTHS.get(month_short)
                                if month_num:
                                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞: {month} -> {month_short}")
                            
                            if month_num:
                                date_obj = datetime(datetime.now().year, month_num, int(day))
                                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
                                weekday_num = date_obj.weekday()
                                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                                weekday = weekday_names.get(weekday_num, "")
                                logger.info(f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è {date}: {weekday_num} -> {weekday}")
                                
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É –º–µ—Å—è—Ü–∞ (–ø–µ—Ä–≤—ã–µ 3 –±—É–∫–≤—ã)
                                short_month = month[:3] if len(month) > 3 else month
                                
                                # –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                                formatted_dates.append(f"{day} {short_month} ({weekday})")
                            else:
                                logger.error(f"–ú–µ—Å—è—Ü '{month}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ MONTHS")
                                formatted_dates.append(date)
                        else:
                            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date}")
                            formatted_dates.append(date)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã {date}: {e}")
                        formatted_dates.append(date)
                
                logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã: {formatted_dates}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (notifications_enabled=True)
                users_with_notifications = await db.get_users_with_notifications()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                admin_notification_text = (
                    "üìÖ <b>–ù–æ–≤—ã–µ –¥–∞—Ç—ã:</b>\n"
                    f"{chr(10).join('‚Ä¢ ' + date for date in formatted_dates)}\n\n"
                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: {len(users_with_notifications)}\n"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                try:
                    for admin_id in config.ADMIN_IDS:
                        try:
                            await self.bot.send_message(
                                admin_id,
                                admin_notification_text
                            )
                            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID: {admin_id})")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∞—Ç
                await db.update_last_checked_dates(list(current_dates))
                logger.info("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
            else:
                logger.info("–ù–æ–≤—ã—Ö –¥–∞—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}") 