from datetime import datetime
from typing import List, Dict
from aiogram import Bot
from bot.config import config, logger,WEEKDAYS, MONTHS
from bot.services.database import Database
from bot.middlewares.schedule_formatter import ScheduleFormatter
import asyncio

class NotificationManager:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.db = Database()
        self.formatter = ScheduleFormatter()
        self._running = True

    async def start_notifications(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while self._running:
            try:
                await self.check_and_send_notifications()
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(5)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self._running = False

    async def check_and_send_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –¥–Ω–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule_data = await self.db.get_schedule()
            if not schedule_data:
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –¥–∞—Ç—É
            last_checked_dates = await self.db.get_last_checked_dates()
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –¥–∞—Ç—ã
            new_dates = set(schedule_data.keys()) - set(last_checked_dates)
            if not new_dates:
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            users = await self.db.get_users_with_notifications()
            if not users:
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –¥–∞—Ç —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
            formatted_dates = []
            for date in sorted(new_dates):
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç datetime
                    if '-' in date:
                        day, month = date.split('-')
                        month_num = MONTHS.get(month.lower())
                        if month_num:
                            date_obj = datetime(datetime.now().year, month_num, int(day))
                            weekday = WEEKDAYS.get(date_obj.strftime('%A').lower())
                            # –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                            formatted_dates.append(f"{day} {month} ({weekday})")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã {date}: {e}")
                    formatted_dates.append(date)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_text = (
                "üîî –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –¥–∞—Ç—ã!\n\n"
                "üìÖ –ù–æ–≤—ã–µ –¥–∞—Ç—ã:\n"
                f"{chr(10).join('‚Ä¢ ' + date for date in formatted_dates)}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for user in users:
                try:
                    await self.bot.send_message(
                        user['user_id'],
                        notification_text,
                        parse_mode="Markdown"
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
                    continue

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã
            await self.db.update_last_checked_dates(list(schedule_data.keys()))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}") 