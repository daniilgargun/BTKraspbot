"""
Copyright (c) 2023-2024 Gargun Daniil
Telegram: @Daniilgargun (https://t.me/Daniilgargun)
Contact ID: 1437368782
All rights reserved.

–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ 
–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–æ.
"""

import asyncio
import logging
from datetime import datetime
from aiogram import Bot
from bot.database.db_adapter import db_adapter as db
from bot.utils.notifications import AdminNotifier
from bot.config import logger

class AcademicYearReset:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞"""
    
    def __init__(self, bot: Bot = None):
        self.bot = bot
        self.admin_notifier = AdminNotifier(bot) if bot else None
    
    async def check_and_reset(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 
        –µ—Å–ª–∏ —ç—Ç–æ 1 –∞–≤–≥—É—Å—Ç–∞ –Ω–æ–≤–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞
        """
        current_date = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, 1 –∞–≤–≥—É—Å—Ç–∞ –ª–∏ —Å–µ–≥–æ–¥–Ω—è
        if current_date.month == 8 and current_date.day == 1:
            logger.info("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–æ–≤–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞ (1 –∞–≤–≥—É—Å—Ç–∞)")
            return await self.reset_users()
        
        return False
    
    async def reset_users(self) -> bool:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞"""
        try:
            logger.info("üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
            try:
                all_users = await db.get_all_users()
                users_count = len(all_users)
                logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º: {users_count}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
                users_count = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            backup_result = await self._backup_users_table()
            if not backup_result:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏. –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.")
                if self.admin_notifier:
                    await self.admin_notifier.notify_critical_error(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                        "–°–±—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–æ–≤—ã–π —É—á–µ–±–Ω—ã–π –≥–æ–¥)"
                    )
                return False
            
            # –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            try:
                logger.info("üîÑ –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
                query = """
                UPDATE user_settings 
                SET selected_group = NULL, selected_teacher = NULL
                """
                db.db.execute_query(query)
                logger.info("‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≥—Ä—É–ø–ø –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {e}")
                if self.admin_notifier:
                    await self.admin_notifier.notify_critical_error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≥—Ä—É–ø–ø –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {e}",
                        "–°–±—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–æ–≤—ã–π —É—á–µ–±–Ω—ã–π –≥–æ–¥)"
                    )
                return False
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            try:
                # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                # –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                logger.info("‚ÑπÔ∏è –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if self.admin_notifier:
                reset_message = (
                    "üîÑ <b>–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞</b>\n\n"
                    f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ —Å–±—Ä–æ—Å–∞: {users_count}\n"
                    "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã\n"
                    "üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞\n\n"
                    "<i>–ù–æ–≤—ã–π —É—á–µ–±–Ω—ã–π –≥–æ–¥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç!</i>"
                )
                await self.admin_notifier.send_to_all_admins(reset_message)
            
            logger.info("‚úÖ –°–±—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            import traceback
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            
            if self.admin_notifier:
                await self.admin_notifier.notify_critical_error(
                    f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}",
                    "–°–±—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–æ–≤—ã–π —É—á–µ–±–Ω—ã–π –≥–æ–¥)"
                )
            return False
    
    async def _backup_users_table(self) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –∏–º–µ–Ω–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            backup_date = datetime.now().strftime("%Y%m%d")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_tables_backup = f"""
            CREATE TABLE IF NOT EXISTS users_backup_{backup_date} AS 
                SELECT * FROM users;
            CREATE TABLE IF NOT EXISTS user_settings_backup_{backup_date} AS 
                SELECT * FROM user_settings;
            """
            db.db.execute_query(user_tables_backup)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã
            tables = db.db.execute_query(
                """
                SELECT name FROM sqlite_master 
                WHERE type='table' AND 
                (name=? OR name=?)
                """, 
                (f"users_backup_{backup_date}", f"user_settings_backup_{backup_date}")
            )
            
            if len(tables) == 2:
                logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Ç–∞–±–ª–∏—Ü —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã (—Å—É—Ñ—Ñ–∏–∫—Å: {backup_date})")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π. –°–æ–∑–¥–∞–Ω–æ {len(tables)} –∏–∑ 2 —Ç–∞–±–ª–∏—Ü.")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            import traceback
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
async def manual_reset(bot: Bot = None) -> bool:
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    reset_manager = AcademicYearReset(bot)
    return await reset_manager.reset_users()


# –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    async def test_reset():
        """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        reset_result = await manual_reset()
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–±—Ä–æ—Å–∞: {'—É—Å–ø–µ—à–Ω–æ' if reset_result else '–æ—à–∏–±–∫–∞'}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–±—Ä–æ—Å
    asyncio.run(test_reset()) 