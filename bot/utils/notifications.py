from aiogram import Bot
import logging
from datetime import datetime
import os
from typing import Optional
from bot.config import config

logger = logging.getLogger(__name__)

class AdminNotifier:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.admin_id = config.ADMIN_ID  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.log_file = "bot_logs.txt"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
        file_handler = logging.FileHandler(self.log_file, encoding='utf-8')
        file_handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s'
        ))
        logger.addHandler(file_handler)
        
    async def send_admin_message(self, message: str, level: str = "INFO") -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            formatted_message = (
                f"ü§ñ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞*\n"
                f"*–£—Ä–æ–≤–µ–Ω—å*: {level}\n"
                f"*–í—Ä–µ–º—è*: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"*–°–æ–æ–±—â–µ–Ω–∏–µ*: {message}\n"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await self.bot.send_message(
                chat_id=self.admin_id,
                text=formatted_message,
                parse_mode="Markdown"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {message}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            
    async def notify_critical_error(self, error: Exception, context: Optional[str] = None) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ"""
        error_message = (
            f"‚ùóÔ∏è *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞*\n"
            f"*–¢–∏–ø*: {type(error).__name__}\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ*: {str(error)}\n"
        )
        if context:
            error_message += f"*–ö–æ–Ω—Ç–µ–∫—Å—Ç*: {context}\n"
            
        await self.send_admin_message(error_message, "ERROR")
        
    async def notify_system_warning(self, resource: str, value: float, threshold: float) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö"""
        warning_message = (
            f"‚ö†Ô∏è *–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ*\n"
            f"*–†–µ—Å—É—Ä—Å*: {resource}\n"
            f"*–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ*: {value}%\n"
            f"*–ü–æ—Ä–æ–≥*: {threshold}%\n"
        )
        await self.send_admin_message(warning_message, "WARNING")
        
    async def notify_bot_restart(self, reason: str) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        restart_message = (
            f"üîÑ *–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞*\n"
            f"*–ü—Ä–∏—á–∏–Ω–∞*: {reason}\n"
        )
        await self.send_admin_message(restart_message, "INFO")
        
    async def notify_startup(self) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        startup_message = "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
        await self.send_admin_message(startup_message, "INFO")
        
    def log_to_file(self, message: str, level: str = "INFO") -> None:
        """–ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥-—Ñ–∞–π–ª"""
        log_entry = f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - {level} - {message}\n"
        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(log_entry)
            
    async def get_last_logs(self, lines: int = 50) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞"""
        try:
            with open(self.log_file, 'r', encoding='utf-8') as f:
                logs = f.readlines()
                return ''.join(logs[-lines:])
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}" 