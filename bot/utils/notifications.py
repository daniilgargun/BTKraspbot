from aiogram import Bot
from bot.config import config, logger
import logging
import os
from datetime import datetime
from typing import Optional, List

class AdminNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.admin_id = config.ADMIN_ID
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        self.admin_ids = config.ADMIN_IDS
        self.log_file = "bot_notifications.log"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
        file_handler = logging.FileHandler(self.log_file, encoding='utf-8')
        file_handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s'
        ))
        logger.addHandler(file_handler)
        
    async def send_admin_message(self, message: str, level: str = "INFO"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        return await self.send_to_admin(self.admin_id, message, level)
    
    async def send_to_admin(self, admin_id: int, message: str, level: str = "INFO") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            prefix = {
                "INFO": "‚ÑπÔ∏è",
                "WARNING": "‚ö†Ô∏è",
                "ERROR": "‚ùå",
                "CRITICAL": "üî•"
            }.get(level, "‚ÑπÔ∏è")
            
            await self.bot.send_message(
                admin_id, 
                f"{prefix} {message}"
            )
            
            logger.log(
                getattr(logging, level, logging.INFO),
                f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID: {admin_id}): {message}"
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            return False
            
    async def send_to_all_admins(self, message: str, level: str = "INFO") -> List[int]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Å–ø–∏—Å–∫–∞ ID, –∫–æ–º—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"""
        success_list = []
        
        for admin_id in self.admin_ids:
            try:
                if await self.send_to_admin(admin_id, message, level):
                    success_list.append(admin_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                
        return success_list
            
    def log_to_file(self, message: str, level: str = "INFO"):
        """–ó–∞–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–æ–≥-—Ñ–∞–π–ª"""
        try:
            log_level = {
                "INFO": logging.INFO,
                "WARNING": logging.WARNING,
                "ERROR": logging.ERROR,
                "CRITICAL": logging.CRITICAL
            }.get(level, logging.INFO)
            
            logger.log(log_level, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª: {e}")
            
    async def notify_startup(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        startup_message = (
            "üöÄ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω</b>\n\n"
            f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
            f"üîÑ –û–∂–∏–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n"
            f"üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –¥–∞—Ç–∞—Ö –≤–∫–ª—é—á–µ–Ω–∞"
        )
        await self.send_to_all_admins(startup_message)
        
    async def notify_shutdown(self, reason="–®—Ç–∞—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        shutdown_message = (
            "üõë <b>–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É</b>\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
        )
        await self.send_to_all_admins(shutdown_message, "WARNING")
            
    async def notify_critical_error(self, error, context: str = ""):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ"""
        error_message = f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"
        if context:
            error_message += f" –≤ {context}"
        error_message += f": {str(error)}"
            
        await self.send_admin_message(error_message, "CRITICAL")
        
    async def notify_system_warning(self, resource: str, value: float, threshold: float) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö"""
        warning_message = (
            f"‚ö†Ô∏è *–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ*\n"
            f"*–†–µ—Å—É—Ä—Å*: {resource}\n"
            f"*–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ*: {value}%\n"
            f"*–ü–æ—Ä–æ–≥*: {threshold}%\n"
        )
        await self.send_admin_message(warning_message, "WARNING")
        
    async def notify_bot_restart(self, reason: str) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        restart_message = (
            f"üîÑ *–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞*\n"
            f"*–ü—Ä–∏—á–∏–Ω–∞*: {reason}\n"
        )
        await self.send_admin_message(restart_message, "INFO")
            
    async def get_last_logs(self, lines: int = 50) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞"""
        try:
            with open(self.log_file, 'r', encoding='utf-8') as f:
                logs = f.readlines()
                return ''.join(logs[-lines:])
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}" 