import os
import sys
import subprocess
import winreg
import urllib.request
import json
from pathlib import Path
import logging
import shutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('setup.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    required_version = (3, 12)
    current_version = sys.version_info[:2]
    
    logger.info(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è Python: {current_version[0]}.{current_version[1]}")
    
    if current_version < required_version:
        logger.error(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python –≤–µ—Ä—Å–∏–∏ {required_version[0]}.{required_version[1]} –∏–ª–∏ –≤—ã—à–µ")
        logger.info("üì• –°–∫–∞—á–∞–π—Ç–µ Python —Å https://www.python.org/downloads/")
        return False
    return True

def check_chrome_installed():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Chrome"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Chrome –≤ —Ä–µ–µ—Å—Ç—Ä–µ Windows
        with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 
                          r"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe") as key:
            chrome_path = winreg.QueryValue(key, None)
            logger.info(f"‚úÖ Google Chrome –Ω–∞–π–¥–µ–Ω: {chrome_path}")
            return True
    except WindowsError:
        logger.error("‚ùå Google Chrome –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info("üì• –°–∫–∞—á–∞–π—Ç–µ Chrome —Å https://www.google.com/chrome/")
        return False

def check_and_create_venv():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if not os.path.exists('venv'):
        logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        try:
            subprocess.run([sys.executable, '-m', 'venv', 'venv'], check=True)
            logger.info("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        except subprocess.CalledProcessError:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
    else:
        logger.info("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    return True

def install_requirements():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    venv_python = os.path.join('venv', 'Scripts', 'python.exe')
    if not os.path.exists(venv_python):
        logger.error("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    logger.info("üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        subprocess.run([venv_python, '-m', 'pip', 'install', '-r', 'requirements.txt'], check=True)
        logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except subprocess.CalledProcessError:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return False

def copy_config_files():
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tests"""
    try:
        # –ö–æ–ø–∏—Ä—É–µ–º .env —Ñ–∞–π–ª
        if os.path.exists('tests/.env') and not os.path.exists('.env'):
            shutil.copy2('tests/.env', '.env')
            logger.info("‚úÖ –§–∞–π–ª .env —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tests")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª Firebase
        firebase_file = 'botbtk-8ac0a-firebase-adminsdk-n5pjf-54392c0500.json'
        if os.path.exists(f'tests/{firebase_file}') and not os.path.exists(firebase_file):
            shutil.copy2(f'tests/{firebase_file}', firebase_file)
            logger.info("‚úÖ –§–∞–π–ª Firebase —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tests")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")
        return False

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞"""
    if not os.path.exists('.env'):
        logger.warning("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if os.path.exists('tests/.env'):
            return copy_config_files()
        else:
            create_env = input("–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env? (y/n): ")
            if create_env.lower() == 'y':
                bot_token = input("–í–≤–µ–¥–∏—Ç–µ BOT_TOKEN: ")
                with open('.env', 'w') as f:
                    f.write(f'BOT_TOKEN={bot_token}\n')
                logger.info("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω")
                return True
            return False
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    logger.info("üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    checks = [
        ("Python 3.12", check_python_version),
        ("Google Chrome", check_chrome_installed),
        ("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ", check_and_create_venv),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", install_requirements),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", copy_config_files),
        ("–§–∞–π–ª .env", check_env_file)
    ]
    
    all_passed = True
    for name, check in checks:
        logger.info(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {name}")
        if not check():
            all_passed = False
            logger.error(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ {name} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        else:
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ {name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞")
    
    if all_passed:
        logger.info("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        logger.info("üìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        logger.info("1. venv\\Scripts\\activate")
        logger.info("2. python -m bot.main")
    else:
        logger.error("\n‚ùå –ù–µ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}") 